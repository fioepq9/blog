[{"categories":null,"content":"输入输出 # 读取一行，去除头尾空格和换行，以空格划分读取为整数，最后放入list。 slice = list(map(int, input().strip().split())) # 不断读取，直到EOF def readUntilEof(): try: while True: yield input() except: return for ipt in readUntilEof(): # do something # 格式化字符串 \"{:0\u003e2d}\".format(1) # 以0填充，右对齐2宽度 \"{:0\u003c2d}\".format(1) # 以0填充，左对齐2宽度 \"{:^10d}\".format(1) # 居中10宽度 \"{0.value}\".format(myVal) # 输出myVal的成员value \"{:.2f}\".format(3.14159) # 保留2位小数 \"{:+.2f}\".format(3.14159) # 带符号保留2位小数 \"{:b}\".format(10) # 输出2进制，1010 \"{:d}\".format(10) # 输出10进制，10 \"{:o}\".format(10) # 输出8进制，12 \"{:x}\".format(10) # 输出16进制，a \"{:#x}\".format(10) # 输出16进制，0xa \"{:#X}\".format(10) # 输出16进制，0XA 内置函数 # 进制 bin(number) # 返回number的2进制表示 oct(number) # 返回number的8进制表示 hex(number) # 返回number的16进制表示 # 数学 abs(number) # 返回number的绝对值 pow(x, y) # 返回x的y次方 # 字符 chr(number) # 将ASCII值转换为char ord(char) # 将char转换为ASCII值 # 遍历 enumerate(itertor) # 返回索引，索引对应的元素 zip(iterable...) # 同时遍历n个序列 # 语法糖 sum(number...) # 求和 max(number...) # 返回最大值 min(number...) # 返回最小值 range(start, stop, [step]) # 返回[start, stop)内以step为步长的序列 map(function, iterable) # 对所有元素调用function并返回 filter(function, iterable) # 过滤掉不符合条件的元素 常用库 import math import collections import heapq import bisect 常用数据结构 # 内置类型 list, tuple, dict, set # collections库内结构 collections.deque collections.Counter collections.OrderedDict ","date":"2022-10-10","objectID":"https://fioepq9.cn/python%E5%B8%B8%E7%94%A8%E5%88%B7%E9%A2%98%E5%87%BD%E6%95%B0/:0:0","tags":null,"title":"Python常用刷题函数","uri":"https://fioepq9.cn/python%E5%B8%B8%E7%94%A8%E5%88%B7%E9%A2%98%E5%87%BD%E6%95%B0/"},{"categories":null,"content":"内置类型 string、bool、数值类、struct、func、数组、slice、map、chan、interface ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:0:0","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"string 的底层实现？ 底层是一个字符串指针加上一个 cap。是一种不可变类型，每次更换内容，实际是更换底层指针。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:1:0","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"slice 的特点 每个 slice 都指向一个底层数组。 使用len()计算 slice 长度的时间复杂度为 O(1)。 使用cap()计算 slice 容量的时间复杂度为 O(1)。 通过函数传递 slice 时，不会拷贝底层数组。 通过append()向切片追加元素时可能触发扩容。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:2:0","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"slice 的扩容机制？ 如果原 slice 的容量小于 1024，则新 slice 的容量扩大为原来的 2 倍。 如果原 slice 的容量大于等于 1024，则新 slice 的容量扩大为原来的 1.25 倍。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:2:1","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"map 什么时候会触发扩容？ 满足下列两个条件之一： 负载因子 \u003e 6.5 时，即平均每个 bucket 存储键值对达到 6.5 个以上。 overflow 数量 \u003e $2^{15}$ 时，即 overflow 的数量超过 32768 时。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:3:0","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"map 的扩容机制？ 增量扩容(负载因子过大触发) 新建一个新的 buckets，容量为原来的 2 倍。 采用渐进式 rehash，在访问 map 时触发迁移。（每次搬运 2 个键值对） 等量扩容(overflow 数量过高触发) 新建一个新的 buckets，容量跟原来一样。 采用渐进式 rehash，在访问 map 时触发迁移。（每次搬运 2 个键值对） ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:3:1","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"map 的缩容机制？ 现在没有真正的缩容机制，要想实现缩容，只能手动新建一个 map 然后将旧 map 的键值对进行转移。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:3:2","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"interface 是什么？ interface 是一组方法签名，所有实现了该签名的类都可以赋值给这个接口类型的变量。 go 使用 interface 实现了「多态」和「泛型」。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:4:0","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"多态的好处？ 解耦了接口和实现类之间的关系，提高了代码的可维护性和灵活性。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:4:1","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"两个相同接口类型的变量是如何进行比较的？ 会同时比较内部的动态类型和动态值，只有都可比较且都相等的时候，才返回true。 语言特性 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:4:2","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"go 和 c/c++的区别？ go 不支持隐式类型转换，c/c++ 支持。 go 要求统一的代码风格，并且有 gofmt 这个格式化工具。 go 通过标识符的首字母是否大写决定可见性，而 c/c++ 通过 private、public 等关键字。 go 支持多返回值，c/c++ 不支持。 go 支持匿名函数，c/c++ 只存在类似的 lambda 表达式。 go 在语言层面支持并发，c/c++ 需要调用外部库。 go 有自己的垃圾回收器，而 c/c++ 只能手动进行垃圾回收。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:5:0","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"defer 的规则 延迟函数的参数在 defer 语句出现时就已经确定了。 延迟函数执行按后进先出顺序执行，即先出现的 defer 最后执行。 延迟函数可能操作使用 defer 语句的函数的具名返回值。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:6:0","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"go 的多值返回是怎么实现的？ 为了实现多值返回，go 是使用栈空间来返回值的。而常见的 C 语言是通过寄存器来返回值的。go 在调用函数的时候，会在栈中预留返回值的空位，在返回前将具体值赋值。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:7:0","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"for range 遍历 slice 的过程中不断向 slice 进行 append，会死循环吗？ 不会。for range是 go 的一个语法糖，它在进入循环之前会先获取len(slice)，然后执行len(slice)次数的循环。 底层实现 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:8:0","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"Golang 的 GC 算法了解吗？ go 使用的是三色标记法，属于标记清除法。 这里的三色，对应了垃圾回收过程中对象的三种状态：灰色，代表对象在标记队列中；黑色，代表对象已被标记；白色，代表对象未被标记。 在垃圾回收开始时，会将根对象标记为灰色，也就是放入标记队列中，然后会从标记队列中取出一个灰色对象，将它引用的对象加入队列中后将它自身变为黑色，直到队列为空。最终黑色对象保留，白色对象被回收。三色标记法实际就是对根对象进行一次 BFS，最后没有遍历到的，即为需要回收垃圾。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:9:0","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"根对象是什么？ 全局变量、执行栈中的变量、寄存器中的变量。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:9:1","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"没有 STW 会出现什么问题？ 内存误回收：考虑一个已经扫描完毕的黑色对象，让它引用一个新建的白色对象。最终这个白色对象会被回收。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:9:2","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"常见的垃圾回收算法 引用计数法：对每个对象维护一个引用计数，当计数为 0 时回收该对象。 优点：对象可以很快被回收，不会出现内存耗尽或达到某个阈值时才回收。 缺点：不能很好地处理循环引用，而且实时维护引用计数，空间开销比较大。 标记清除法：从根变量开始遍历所有引用的对象并标记，最后回收所有没有被标记的对象。 优点：可以处理循环引用，并且不用实时维护引用计数，减少了空间上的开销。 缺点：需要 STW，即暂停程序运行。 分代收集法：按照对象生命周期长短划分，生命周期长的放入老年代，而短的放入新生代，不同代有不同的回收算法和回收频率。 优点：回收性能好。 缺点：算法复杂。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:9:3","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"GMP 模型 G：指 goroutine。 M：工作线程，在 go 中被称为 Machine。 P：处理器，是 go 中定义的一个概念，它包含运行 go 代码的必要资源。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:10:0","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"goroutine 调度策略 每个 P 维护一个包含 G 的本地队列，P 周期性地从本地队列头部取出 G 调度到 M 中执行一小段时间后将上下文保存下来，然后将 G 放到本地队列尾部。除了本地队列以外，还有一个全局队列。每个 P 都会周期性地查看全局队列。如果一个 P 的本地队列中的 G 已全部执行完毕，那么会从全局队列中拿一批 G 放入本地队列；如果全局队列中也没有 G，那么它会尝试将其它 P 的本地队列中的 G 偷取一半放入自身的本地队列。 当 G 进入系统调用时，所属的 M 会释放 P，P 会被其它 M 获取（可能是空闲的 M，如果没有空闲的 M，那么新建一个 M），原本的 M 由于系统调用而阻塞。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:10:1","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"内存逃逸 在一段程序中，每一个函数都会有自己的内存区域存放自己的局部变量、返回地址等，这些内存会由编译器在栈中进行分配，每一个函数都会分配一个栈桢，在函数运行结束后进行销毁，但是有些变量我们想在函数运行结束后仍然使用它，那么就需要把这个变量在堆上分配，这种从\"栈\"上逃逸到\"堆\"上的现象就成为内存逃逸。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:11:0","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"逃逸策略 如果对象在函数外部没有引用，则优先放到栈中。（如果需要内存过大，则放到堆中） 如果对象在函数外部存在引用，则必定放到堆中。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/:11:1","tags":null,"title":"Golang面试题","uri":"https://fioepq9.cn/golang%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"计算机网络体系结构 应用层：HTTP、HTTPS、DNS ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:0:0","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"HTTP 是什么？ HTTP，即「超文本传输协议」，是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:1:0","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"超文本的最关键点是什么？ 最关键的是「超链接」，它能够从一个超文本跳转到另一个超文本。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:1:1","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"HTTP 的请求报文包含什么？ 请求报文是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。 GET 和 POST 有什么区别？ 根据 RFC 规范，GET 的语义是从服务器获取指定的资源，POST 的语义是根据请求负荷对指定资源做出处理。 GET 请求的参数一般写在 URL 中，由于 URL 规定只能支持 ASCII 字符，所以 GET 的参数也只允许 ASCII 字符，同时浏览器一般会对 URL 的长度有限制。POST 请求的参数一般写在报文的 body 中，body 中的数据可以是任意格式的，只要客户端与服务端协商好即可，而且浏览器不对 body 大小做限制。 GET 方法是安全且幂等的，安全指的是不会修改服务器上的资源，幂等指的是多次执行相同的操作得到的结果也是相同的。POST 方法一般用于新增或提交数据，会修改服务器上的资源，所以是不安全的，且多次提交数据就会创建多个资源，所以不是幂等的。 可以对 GET 请求的数据做缓存，而且在浏览器中 GET 请求可以保存为书签。浏览器一般不会缓存 POST 请求，也不能将 POST 请求保存为书签。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:1:2","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"HTTP 的响应报文包含什么？ 响应报文由协议版本、状态码、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。 HTTP 常见的状态码有哪些？ 1xx类状态码属于提示信息，是协议处理中的一种中间状态，实际使用较少。 2xx类状态码表示请求成功被处理。 「200 OK」：表示一切正常。 「204 No Content」：与 200 OK 基本相同，但返回的响应报文中没有 body。 「206 Partial Content」：通常应用于 HTTP 分块下载或断点续传，表示响应返回的 body 数据是资源的一部分。 3xx类状态码表示请求的资源发生了变动，需要使用新的 URL 进行访问。 「301 Moved Permanently」：表示永久重定向，如果保存原 URL 为书签了，这个时候应该修改。 「302 Found」：表示临时重定向，这一次访问需要使用新的 URL。 「304 Not Modified」：表示资源未修改，用于告知客户端可以继续使用缓存资源。 4xx类状态码表示请求报文有误，服务器无法处理。 「400 Bad Request」：表示请求报文有误，是一个笼统的错误码。 「403 Forbidden」：表示请求的资源被服务器禁止访问。 「404 Not Found」：表示请求的资源在服务器上未找到。 5xx类状态码表示请求报文正确，但服务器内部处理时发生了错误。 「500 Internal Server Error」：表示服务器内部处理发生了错误，是一个笼统的错误码。 「501 Not Implemented」：表示客户端请求的功能还不支持，类似于“敬请期待”的意思。 「502 Bad Gateway」：通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问上游服务器时收到了无效响应。 「503 Service Unavailable」：表示因为临时的服务器维护或者过载，当前无法处理请求。 「504 Gateway Timeout」：通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，但访问上游服务器时超时。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:1:3","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"HTTP 的报文首部和报文主体如何区别？ 存在一个 CR+LF 组成的标准空行，进行分隔。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:1:4","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"HTTP 缓存有哪些实现方式？ HTTP 缓存有两种实现方式，分别是「强制缓存」和「协商缓存」。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:2:0","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"强制缓存 「强制缓存」指的是只要浏览器判断缓存没有过期，就直接使用浏览器的本地缓存，决定权在浏览器。「强制缓存」使用 HTTP 响应首部中的Cache-Control字段实现。 当浏览器第一次访问服务器资源时，服务器会在返回资源的同时，在响应首部加上Cache-Control字段，这个字段中设置了缓存过期时间；当浏览器再次访问相同资源时，会先通过请求资源的时间与Cache-Control中设置的过期时间大小计算出缓存是否过期，过期才会重新请求服务器。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:2:1","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"协商缓存 「协商缓存」就是浏览器与服务器进行协商，根据协商结果来判断是否使用本地缓存。只有在未命中「强制缓存」时，才能发起「协商缓存」请求。「协商缓存」可以基于两种首部实现。 请求首部的If-Modified-Since字段和响应首部的Last-Modified字段，Last-Modified字段标记了资源的最后修改时间，当缓存过期需要再次向服务器发送请求时，在首部If-Modified-Since字段中携带Last-Modified字段的值，服务器收到后会与被请求资源的最后修改时间进行对比，如果资源修改过，就返回「200 OK」；如果资源无新修改，就返回「304 Not Modified」。 请求首部的If-None-Match字段和响应首部的ETag字段，ETag字段是资源的唯一标识，当缓存过期需要再次向服务器发送请求时，在首部If-None-Match字段中携带ETag字段的值，服务器收到后会进行比对，如果资源修改过，就返回「200 OK」；如果资源无新修改，就返回「304 Not Modified」。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:2:2","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"HTTP 有哪些优缺点？ 优点： 「简单」：HTTP 基本的报文格式就是 header + body，头部信息也是简单的 key-value 对，易于理解，学习成本低。 「灵活、易于扩展」：HTTP 协议中的各类请求方法、URI、状态码、首部字段没有被固定死，允许开发人员自定义和扩充。 「应用广泛」：HTTP 的应用范围相当广泛，从 PC 端的浏览器到手机上的各种 APP，天然具有跨平台的优越性。 双刃剑： 「无状态」 好处：不需要额外的资源记录状态信息，减轻了服务器的负担，能够把更多的 CPU 和内存用来对外提供服务。 坏处：进行有关联性的操作时非常麻烦，例如【登录-下单-结算-支付】。 通常使用 Cookie 技术来解决无状态的弊端。 「明文传输」 好处：通过浏览器 F12 控制台或者使用抓包工具抓包可以肉眼查看，为调试工作带来了极大的便利性。 坏处：信息容易被窃取，如果信息包含账号、密码等重要隐私，就容易泄漏。 缺点：「不安全」 通信过程使用明文，内容可能会被窃听。 不会验证通信方的身份，可能遭遇伪装。 无法证明报文的完整性，报文可能遭到篡改。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:3:0","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"从输入网址到获得页面的过程？ 浏览器对 URL 进行解析，获取到使用的协议、域名、URI。 浏览器根据 URL 解析后获得的信息生成 HTTP 请求信息。 浏览器查询自身对域名的缓存，未命中就继续查询操作系统的缓存，如果还是未命中就查询 hosts 文件。最后如果没有查询到域名的对应 IP 地址，浏览器就会使用 DNS 协议进行域名解析。 域名解析过程： 客户端首先向本地 DNS 服务器（在 TCP/IP 设置中填写的 DNS 服务器地址）发出一个 DNS 请求。 本地域名服务器收到请求后：如果缓存里能找到映射关系，就直接返回；如果没有，本地域名服务器会去询问根域名服务器。 根域名服务器收到请求后，返回域名对应的顶级域名服务器地址。 本地域名服务器收到顶级域名服务器地址后，会去询问顶级域名服务器。 顶级域名服务器收到请求后，返回域名对应的权威名称服务器地址。 本地域名服务器收到权威名称服务器地址后，会去询问权威名称服务器。 权威名称服务器收到请求后，就会返回域名对应的 IP 地址。 本地域名服务器收到 IP 地址后，将它进行缓存，然后返回给客户端。 浏览器获取到域名对应的 IP 地址后，首先要跟服务器请求建立 TCP 连接，也就是进行 TCP 三次握手。三次握手的目的是保证双方都有发送和接收的能力。 TCP 连接建立完成后，浏览器就会向服务器发送 HTTP 请求。 服务器接收到请求后，将浏览器请求的资源返回给浏览器。 最后浏览器根据请求获取到的资源、数据渲染页面。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:4:0","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"HTTP 和 HTTPS 有哪些区别？ HTTP 传输数据是明文传输的，存在安全方面的问题。HTTPS 在 TCP 和 HTTP 之间加入了 SSL/TLS 安全协议，添加了加密机制。 HTTP 只需要进行 TCP 三次握手后就可以开始传输数据；HTTPS 在 TCP 三次握手后，还需要进行 SSL/TLS 的握手过程，才可以进行数据的传输。 HTTP 的知名端口号是 80，HTTPS 的知名端口是 443。 HTTPS 需要向 CA（证书权威机构）购买数字证书，用于保证服务器的身份可信。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:5:0","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"HTTPS 解决了 HTTP 的哪些问题？ HTTPS 通过「混合加密」的方式实现了信息的机密性，解决了窃听的风险。 HTTPS 通过「摘要算法」的方式实现了信息的完整性，它为数据生成了独一无二的指纹，解决了信息被篡改的风险。 HTTPS 将服务器公钥放入到数字证书中，由 CA 机构颁发的数字证书保证服务器公钥的可靠性，解决了冒充的风险。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:6:0","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"混合加密是什么？ HTTPS 采用的是「对称加密」和「非对称加密」相结合的「混合加密」方式： 在通信建立前采用非对称加密的方式交互「对称密钥」，后续不再使用非对称加密。 在通信过程中全程使用对称加密的「对称密钥」对数据进行加密。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:6:1","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"采用混合加密的原因？ 「对称加密」只使用一个密钥，运算速度快，但密钥必须保密，无法做到安全的密钥交换。 「非对称加密」使用公钥和私钥组成的密钥对，公钥可以任意分发而私钥需要保密，解决了密钥交换问题，但加密解密的开销比较大。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:6:2","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"摘要算法是如何验证数据的完整性的？ 客户端在发送数据前，会使用「摘要算法」计算出数据明文的指纹，然后将「数据明文+指纹」一同加密发送给服务器。服务器解密后，使用相同的「摘要算法」计算出数据明文的指纹，通过比对指纹，验证数据的完整性。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:6:3","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"SSL/TLS 的握手过程？ Client Hello 首先，由客户端向服务器发起加密通信请求，即Client Hello请求。 在这一步中，客户端主要向服务器发送以下信息： 客户端支持的 SSL/TLS 协议版本。 客户端生成的随机数Client Random。 客户端支持的密码套件列表。 Server Hello 服务器收到客户端的请求后，向客户端发出响应，即Server Hello。 服务器响应的内容如下： 服务器确认使用的 SSL/TLS 协议版本、服务器生成的随机数Server Random、服务器确认使用的密码套件列表。 服务器的 CA 数字证书，里面包含服务器公钥。 客户端回应 客户端收到服务器的回应后，首先通过内嵌在浏览器或者操作系统中的 CA 公钥，确认服务器数字证书的真实性。 如果证书没有问题，客户端会从数字证书中取出服务器公钥，然后使用它加密报文，向服务器发送以下信息： 发送一个随机数pre-master key。 加密通信算法改变通知，表示随后的信息使用「会话密钥」进行加密。 客户端握手结束通知，表示客户端的握手阶段已经结束。同时把之前所有信息根据「摘要算法」生成指纹发送给服务器进行校验。 客户端发送完信息后，会使用Client Random、Server Random、pre-master key三个随机数根据协商的加密算法生成本次通信的「会话密钥」。 服务器回应 服务器收到报文后，使用私钥进行解密，然后根据摘要指纹验证握手信息，验证完毕后，使用Client Random、Server Random、pre-master key三个随机数根据协商的加密算法生成本次通信的「会话密钥」。然后，向客户端发送最后的握手信息： 加密通信算法改变通知，表示随后的信息使用「会话密钥」进行加密。 服务器握手结束通知，表示服务器的握手阶段已经结束。同时把之前所有信息根据「摘要算法」生成指纹发送给客户端进行校验。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:7:0","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"DNS 是什么？ 「DNS」是因特网上作为域名和 IP 地址相互映射的一个分布式数据库，它属于应用层协议，使用 UDP 进行传输。 传输层：TCP 和 UDP ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:8:0","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"什么是三次握手？ 第一次握手：客户端发送一个 SYN 置位，序列号为随机生成的客户端初始序列号的报文给服务端，随后客户端进入 SYN_SENT 状态。 第二次握手：服务端收到客户端的 SYN 报文后，根据 SYN 置位可知客户端在请求建立连接。然后服务端发送一个 ACK 置位，SYN 置位，确认号为客户端初始序列号+1，序列号为随机生成的服务端初始序列号的报文给客户端。随后服务端进入 SYN_RCVD 状态。 第三次握手：客户端检查收到的报文 ACK 是否置位，确认号是否为客户端初始序列号+1。客户端根据报文的 SYN 标志位被置位可知服务端同意建立连接，检查正确后，发送一个 ACK 置位，确认号为服务端初始序列号+1 的报文给服务端，随后客户端进入 ESTABLISHED 状态。服务端收到报文后检查 ACK 是否置位，确认号是否为服务端初始序列号+1，检查正确后服务端也进入 ESTABLISHED 状态。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:9:0","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"TCP 建立连接可以两次握手吗？为什么？ 不可以，有两个原因。 第一个，是当一个因超时等原因已经失效的连接请求报文段传送到了 Server。本来这是已失效的报文段，但 Server 会认为这是 Client 再次发出的新的连接请求，于是就向 Client 发出 ACK 报文段同意请求。由于是两次握手，新的连接在服务端看来已经建立了，Server 会一直维持连接等待 Client 发送数据，白白浪费资源。 第二个是，只有两次握手的话，Server 无法确认 Client 正确接收到了第二次握手的报文，也就无法保证 Client 和 Server 之间成功交换了初始序列号。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:9:1","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"可以采用四次握手吗？为什么？ 可以。但是会降低传输效率。 四次握手是指：将第二次握手的报文段拆分成 ACK 报文和 SYN 报文。出于优化的目的，这是可以合并的。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:9:2","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"第三次握手中，如果客户端的 ACK 报文未送达服务端，会怎么样？ Server：由于 Server 没有收到 ACK 确认报文，因此会重发之前 SYN+ACK 报文（默认重发 5 次，之后自动关闭连接，进入 CLOSED 状态），Client 收到 SYN+ACK 报文后会重发 ACK 报文。 Client 端有两种情况。 一种是 Server 超时重发过程中，Client 端向服务端发送了包含 ACK 标志位的数据报文，服务端读取确认号后，根据确认号大于服务端初始序列号+1，可以进入 ESTABLISHED 状态。 另一种情况是，Server 已经进入 CLOSED 状态了，Client 向服务端发送数据，服务端会以 RST 包应答。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:9:3","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"如果已经建立了连接，但客户端出现了故障怎么办？ 服务端每收到一次客户端的请求后都会重新复位一个计时器，时间通常是设置为 2 小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔 75 秒钟发送一次。若一连发送 10 个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:9:4","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"初始序列号是什么？(序列号的作用是什么？) TCP 是一种全双工的连接，它在两个方向都有一个初始序列号。在同一个方向上，发送端会以初始序列号作为原点，对要传输的数据进行编号。接收端通过序列号可以确认数据是否合法，同时发送端根据接收端发送的 ACK 报文中的确认号可以确认哪些数据已被接收。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:9:5","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"什么是四次挥手？ 第一次挥手：Client 发送一个 FIN 置位，并有相应序列号的报文给 Server，随后进入 FIN_WAIT_1 状态。此时，Client 不再发送数据，但仍可以接收数据。 第二次挥手：Server 收到 FIN 后，发送一个 ACK 置位，确认号为收到序列号+1 的报文，进入 CLOSE_WAIT 状态。Client 接收到 ACK 报文后，进入 FIN_WAIT_2 状态。 第三次挥手：Server 发送一个 FIN 置位，并填写了对应序列号的报文给 Client，随后进入 LAST_ACK 状态。 第四次挥手：Client 收到服务器的 FIN 报文后，进入 TIME_WAIT 状态；接着发送一个 ACK 置位，确认号为三次挥手的序列号+1 的报文给 Server；Server 接收到后，确认 ACK 标志位和确认号后，进入 CLOSED 状态。客户端等待 2*MSL（报文段最长寿命）时间后，也进入 CLOSED 状态。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:10:0","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"为什么不能把服务端发送的 ACK 和 FIN 合并，变成三次挥手？（CLOSE_WAIT 状态的意义是什么？） 因为服务器收到客户端断开连接的请求时，可能还有一些数据没有发完，这时先回复 ACK，表示接收到了断开连接的请求。等到数据发完之后再发 FIN，断开服务器到客户端的数据传送。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:10:1","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"如果第二次挥手时服务器的 ACK 没有送达客户端，会怎么样？ 客户端没有收到 ACK 确认，会重新发送 FIN 请求。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:10:2","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"客户端 TIME_WAIT 状态的意义是什么？ 第四次挥手时，客户端发送给服务器的 ACK 有可能丢失，TIME_WAIT 状态就是用来重发可能丢失的 ACK 报文。如果 Server 没有收到 ACK，就会重发 FIN，如果 Client 在 2MSL 的时间内收到了 FIN，就会重新发送 ACK 并再次等待 2MSL，防止 Server 没有收到 ACK 而不断重发 FIN。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:10:3","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"TCP 的流量控制是如何实现的？ TCP 是使用滑动窗口协议实现流量控制的。 接收端会维护一个接收窗口，根据自身剩余缓冲区大小动态调整，在返回 ACK 报文时将接收窗口大小放在 TCP 报文首部的窗口字段中告知发送端。发送窗口的大小不能超过接收窗口的大小，只有当发送端发送的数据收到确认后，才能右移发送窗口。 发送窗口的上限为接收窗口和拥塞窗口中的较小值。接收窗口表明了接收方的接收能力，拥塞窗口表明了网络的传送能力。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:11:0","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"什么是零窗口？（接收窗口为 0 时会怎么样？） 如果接收方没有能力接收数据，就会将接收窗口设置为 0，这时发送方必须暂停发送数据，但是会启动一个持续计时器(persistence timer)，到期后发送一个大小为 1 字节的探测数据包，以查看接收窗口状态。如果接收方能够接收数据，就会在返回的报文中更新接收窗口大小，恢复数据传送。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:11:1","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"TCP 的拥塞控制是怎么实现的？ 拥塞控制主要由四个算法组成：慢启动、拥塞避免、快速重传、快速恢复。 慢启动： 在刚建立 TCP 连接或者出现丢包的时候，发送端处于慢启动状态，这个时候会把拥塞窗口设置为 1 个 MSS。每接收到一个 ACK 报文，就增加 1 个 MSS。这样每经过一个 RTT，拥塞窗口的大小就会加倍。 拥塞避免： 当拥塞窗口的大小达到慢启动阈值（ssthresh）时，开始执行拥塞避免算法。每经过 1 个 RTT，拥塞窗口大小不再指数增长，而是线性增长。 快速重传： 接收方在收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方）而不是等到自己发送数据时捎带确认。 发送方只要一连收到三个重复确认就立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。 快速恢复： 当发送方连续收到三个重复确认时，就把慢启动阈值减半，同时将拥塞窗口的大小置为慢启动阈值的大小，然后执行拥塞避免算法。 不执行慢开始算法的原因是：因为如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方认为现在网络可能没有出现拥塞。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:12:0","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"TCP 如何保证可靠性？ TCP 首部的校验和 应答机制：接收端收到数据之后会根据序列号，会发送一个 ACK 确认报文。 超时重发机制：发送端发出数据后，会启动一个定时器，超时未收到 ACK 报文，就会重发。 流量控制：确保接收端能完整接收发送端的数据而不会缓冲区溢出。 拥塞控制：当网络拥塞时，通过拥塞控制减少数据的发送，防止包丢失。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:13:0","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"TCP 与 UDP 的区别 连接 TCP 是面向连接的传输层协议，传输数据前要先建立连接。 UDP 是无连接的，直接就可以传输数据。 服务对象 TCP 是一对一的两点服务，即一条连接只有两个端点。 UDP 支持一对一、一对多、多对一、多对多的交互通信。 可靠性 TCP 是可靠交付数据的，数据可以无差错、不丢失、不重复、按需到达。 UDP 是尽最大努力交付数据，不保证可靠性。 拥塞控制、流量控制 TCP 有拥塞控制和流量控制机制，保证数据传输的安全性。 UDP 则没有，即使网络非常拥堵，也不会影响 UDP 的发送速率。 首部开销 TCP 的首部较长，最小是 20 个字节，如果使用了额外的选项，还会进一步增长。 UDP 的首部只有 8 个字节，并且是固定不变的，开销较小。 传输方式 TCP 是流式传输，没有边界，但保证顺序和可靠性。 UDP 是一个包一个包的发送，是有边界的，但可能会丢包和乱序。 分片方式 TCP 的数据大小如果大于 MSS，则会在传输层进行分片，如果传输过程中丢失了一个分片，只需要重传这个丢失的分片。 UDP 的数据大小如果大于 MTU，则会在 IP 层进行分片。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:14:0","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"什么时候选择 TCP，什么时候选择 UDP？ 对某些实时性要求比较高的情况，选择 UDP，比如游戏，媒体通信，实时视频流（直播），即使出现传输错误也可以容忍；其它大部分情况下使用 TCP，因为要求传输的内容可靠，不出现丢失。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:14:1","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"HTTP 可以使用 UDP 吗？ 可以，HTTP/3 就是使用基于 UDP 的 QUIC 协议。 网络层：IP 和 ARP ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:14:2","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"什么是 ARP 协议？ ARP 协议完成了 IP 地址与物理地址的映射。每一个主机都设有一个 ARP 高速缓存，里面有所在的局域网上的各主机和路由器的 IP 地址到硬件地址的映射表。当源主机要发送数据包到目的主机时，会先检查自己的 ARP 高速缓存中有没有目的主机的 MAC 地址，如果有，就直接将数据包发到这个 MAC 地址，如果没有，就向所在的局域网发起一个 ARP 请求的广播包（在发送自己的 ARP 请求时，同时会带上自己的 IP 地址到硬件地址的映射），收到请求的主机检查自己的 IP 地址和目的主机的 IP 地址是否一致，如果一致，则先保存源主机的映射到自己的 ARP 缓存，然后给源主机发送一个 ARP 响应数据包。源主机收到响应数据包之后，先添加目的主机的 IP 地址与 MAC 地址的映射，再进行数据传送。如果源主机一直没有收到响应，表示 ARP 查询失败。 如果所要找的主机和源主机不在同一个局域网上，那么就要通过 ARP 找到一个位于本局域网上的某个路由器的硬件地址，然后把分组发送给这个路由器，让这个路由器把分组转发给下一个网络。剩下的工作就由下一个网络来做。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/:15:0","tags":null,"title":"计算机网络面试题","uri":"https://fioepq9.cn/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"树 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98/:0:0","tags":null,"title":"数据结构与算法面试题","uri":"https://fioepq9.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"AVL 树 O(log2 n)的时间复杂度进行搜索、插入、删除操作。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98/:1:0","tags":null,"title":"数据结构与算法面试题","uri":"https://fioepq9.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"红黑树 红黑性质： 每个结点或是红色的，或是黑色的。 根结点是黑色的。 null 结点视为黑色。 如果一个结点是红色的，则它的两个子结点都是黑色的。 对每个结点，从该结点到其后代叶结点的简单路径上，均包含相同数目的黑色结点。 【左倾红黑树】红色的结点只能是左结点。 引理 一颗有 n 个结点的红黑树的高度至多为 2log(n+1) 优点 红黑树是牺牲了严格的高度平衡的优越条件为代价，它只要求部分地达到平衡要求，结合变色，降低了对旋转的要求，从而提高了性能。红黑树能够以 O(log2 n)的时间复杂度进行搜索、插入、删除操作。此外，由于它的设计，任何不平衡都会在三次旋转之内解决。 时间复杂度：均为 O(log2 n) ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98/:2:0","tags":null,"title":"数据结构与算法面试题","uri":"https://fioepq9.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"B/B+树 B/B+树是为磁盘或其他直接存取的辅助存储设备而设计的一种平衡搜索树。在降低磁盘 I/O 操作数方面要更好一些。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98/:3:0","tags":null,"title":"数据结构与算法面试题","uri":"https://fioepq9.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"m 阶 B 树的特点 每个结点最多有 m-1 个键。 根结点至少有一个键，非根结点至少有 m/2 个键。 每个结点中的键升序排列，每个键的左子树中的所有键都小于它，右子树中的所有键都大于它。 所有叶子结点位于同一层，即根节点到每个叶子结点的高度相同。 每个结点都存有数据。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98/:3:1","tags":null,"title":"数据结构与算法面试题","uri":"https://fioepq9.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"m 阶 B+树的特点 每个结点最多有 m-1 个键。 根结点至少有一个键，非根结点至少有 m/2 个键。 每个结点中的键升序排列，每个键的左子树中的所有键都小于它，右子树中的所有键都大于等于它。 所有叶子结点位于同一层，即根节点到每个叶子结点的高度相同。 只有叶子节点保存数据，同时所有叶子节点构成一个链表。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98/:3:2","tags":null,"title":"数据结构与算法面试题","uri":"https://fioepq9.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"控制流 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:0:0","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"进程、线程、协程之间的区别？ 进程是一个运行中的程序实例，是 CPU 资源调度的基本单位；线程是运行在进程上下文的逻辑控制流，是程序执行的基本单位；协程是用户态的轻量级线程，是线程内部调度的基本单位。线程依赖于进程，一个进程里至少存在一个线程；协程依赖于线程，一个线程里至少存在一个协程。 进程持有的资源有：进程 ID、页表（提供了一个独立于其它进程的地址空间）、文件描述符表、代码段、数据段、环境变量、寄存器中的内容（通用寄存器、flag 寄存器、程序计数器）、内核栈、用户栈； 线程持有的资源有：线程 ID、寄存器中的内容（通用寄存器、flag 寄存器、程序计数器）、内核栈、用户栈； 协程持有的资源有：寄存器中的内容（通用寄存器、flag 寄存器、程序计数器）、用户栈。 切换开销上：进程 \u003e 线程 \u003e 协程。切换，实质上就是将当前上下文保存，然后取出新的上下文，显然持有的资源越多，切换的开销也就越大；同时，进程切换的时候还会刷新快表，导致快表缓存失效，也就导致新进程刚启动的时候运行速率较慢。进程、线程切换时都要陷入内核态，而协程不需要。进程、线程的切换由操作系统调度，而协程由用户自己调度。 通信方面上：进程间的通信主要依靠 IPC；而线程、协程间的通信，因为同一进程下的线程、协程共享内存，通信可以直接通过内存进行。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:1:0","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"同一进程中的线程可以共享哪些数据？ 进程 ID、页表、文件描述符表、代码段、数据段、环境变量。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:1:1","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"线程独占哪些资源？ 线程 ID、寄存器中的内容、内核栈、用户栈。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:1:2","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"进程是如何进行切换的？ 进程的切换是由操作系统进行的。操作系统首先会触发一个系统调用，进入到内核态；在内核态中，将当前进程的上下文保存，然后通过进程调度算法从阻塞态的进程队列中取出一个进程，恢复新进程的上下文，然后退出内核态，将控制权移交给新进程。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:2:0","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"进程的状态有哪些？ 五态模型 新建态：进程刚刚被创建，等待系统完成创建进程的所有必要信息。 就绪态：一个进程得到了除控制权以外的所需资源，一旦得到控制权就可以执行。 运行态：一个进程在运行的过程中。 阻塞态：一个进程正在等待某一事件的发生，或者说等待一个信号而暂时停止运行。 终止态：进程已结束运行，回收除进程控制块（PCB）之后的其他资源，并等待其他进程从 PCB 中收集相关信息。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:2:1","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"进程调度策略有哪些？ 批处理系统 先来先服务(FCFS) 按照请求的顺序进行调度。这是一种非抢占式的算法，开销小，没有饥饿问题。可能会导致短作业的响应时间过长。 最短作业优先(SJF) 按估计运行时间最短的顺序进行调度。也是一种非抢占式的算法，吞吐量高。但如果一直有短作业到来，会导致长作业的饥饿。 最短剩余时间优先(SRTN) 按估计剩余运行时间的顺序进行调度，是最短作业优先的抢占式版本，吞吐量高。跟最短作业优先有一样的问题，可能导致长作业饥饿。 交互式系统 时间片轮转(Round Robin) 将所有就绪进程按 FCFS 的原则排成队列，用完时间片的进程回到队列尾部。这种算法很好地兼顾了响应时间和处理时间，但时间片的大小选择比较困难。如果时间片过小，进程切换频繁，开销太大；如果时间片太长，实时性就得不到保证。 优先级调度算法 为所有进程分配一个优先级，按优先级进行调度。为了防止低优先级的进程得不到调度，可以随时间增加等待进程的优先级。 多级反馈队列调度算法(Multilevel Feedback Queue) 维护多个就绪进程队列，优先级递减，时间片递增。只有优先级更高的队列为空时才会调度低优先级队列中的队列。所有进程一开始都位于最高优先级队列，每次执行完一个时间片，就移动到下个队列。为了避免长作业饥饿问题，可以每隔一段时间，就重新将进程放入最高优先级队列。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:2:2","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"进程间通信的方式（IPC）？ 管道（匿名管道、有名管道） 消息队列 共享内存 信号量 信号 套接字 讲讲你对同步和互斥的理解？ 同步：多个控制流因为合作而使得控制流的执行有一定的先后顺序。 互斥：同一时间只有一个控制流能够执行。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:2:3","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"什么是死锁？ 多个控制流之间互相持有所需资源，并等待其它控制流释放资源，导致的循环等待的情况。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:3:0","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"死锁产生的必要条件？ 互斥：一个资源一次只能被一个控制流持有。 占有并等待：一个控制流至少占有一个资源，并在等待另一个被其它控制流占有的资源。 非抢占：已经分配给一个控制流的资源不能被强制性抢占，只能由控制流完成任务后自行释放。 循环等待：若干控制流之间形成一种头尾相接的环形等待资源关系，该环路中的每个控制流等在等待上一个控制流所占有的资源。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:3:1","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"死锁的处理方法？ 鸵鸟策略 直接忽略死锁。因为解决死锁的问题的代价很高，当发生死锁时不会对用户造成多大影响，或者发生死锁的概率很低时，可以采用鸵鸟策略。 死锁预防 基本思想是破坏形成死锁的四个必要条件。 破坏互斥条件：允许某些资源同时被多个控制流持有。这个做法的问题是有些资源本身不具有这种属性，实用性有限。 破坏占有并等待条件：实现资源预先分配策略，即一个控制执行任务之前，必须一次性申请所需资源，否则不允许。这个做法的问题是很多时候我们无法在执行前得知一个控制流具体需要哪些资源。同时这个也会降低资源的利用率，减少了并发量。 破坏非抢占条件：允许控制流强行抢占其它控制流占有的资源。抢占会带来很多额外的开销。 破坏循环等待条件：对资源进行编号，所有控制流对资源的申请必须按序提出，只有占有了低级资源的控制流才能申请高级资源。这样避免了占有高级资源的控制流再去申请低级资源，破坏了循环环路。 死锁避免 动态检查资源分配状态，确保系统处于安全状态，只有处于安全状态时才会进行资源的分配。安全状态指的是：存在某种对控制流的资源分配顺序，使得每一个控制流都能运行。 死锁解除 当检测到死锁的时候，让某些控制流回滚到足以解除死锁的地步，控制流回滚时释放资源。这要求系统维护控制流的历史信息，并设置回滚点。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:3:2","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"虚拟内存是什么？ 虚拟内存是一种对真实物理内存的抽象，它将物理内存看成是磁盘的缓存，为每个进程提供了独立的地址空间，保护了每个进程的地址空间不被其他进程破坏。 将一个进程内的虚拟地址转化成对应的物理地址，叫做地址翻译。计算机的地址翻译是软硬件结合的，os 负责为每个进程维护页表，硬件 MMU 通过快表、页表执行地址翻译。MMU 如果从页表中发现该页不在内存中，就会触发缺页异常，根据页面置换算法从已缓存的页中选择一页进行置换（如果牺牲页被修改过，就复制其回磁盘）。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:4:0","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"虚拟内存的优点 每个进程拥有独立的地址空间，这简化了内存管理，让进程间互不影响（通过在页表中设置许可位，提供访问控制）。 将物理内存扩充成了更大的逻辑内存。 通过将相应的虚拟页映射到同一物理页，可以实现共享库代码段。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:4:1","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"页面置换算法有哪些？ 【无法实现】最佳置换法（OPT） 每次选择淘汰的页面是以后永不使用，或者在最长时间内不再被访问的页面。 先进先出置换法（FIFO） 每次选择淘汰的页面是最早进入内存的页面。 最近最久未使用置换法（LRU） 每次选择淘汰的页面是最近最久未使用的页面。 时钟置换法（Clock） 是 LRU 算法的近似实现。维护位组成的循环队列，每个位代表一个页。当某页被访问时，其访问位置为 1。当需要淘汰一个页面时，只需检查页的访问位。如果是 0，就选择该页换出；如果是 1，则将它置为 0，暂不换出，继续检查下一个页面。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:4:2","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"抖动指的是什么现象？ 指页面不断地换进换出，导致 CPU 利用率低下。通常成因是经常使用的内存大小超出了物理内存大小。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:4:3","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"碎片指的是什么现象？ 内部碎片：在一个已分配块比有效载荷大时发生的。也即分配了但不会被使用的空间。 外部碎片：当空闲内存合计起来足够满足一个分配请求，但是没有一个单独的空闲块足够大可以来处理这个请求时发生的。 硬件结构 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:4:4","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"冯诺依曼模型由哪些部分组成？分别对应计算机的哪些硬件？ 「运算器」、「控制器」、「存储器」、「输入设备」、「输出设备」。 「运算器」对应 CPU 中的逻辑运算单元 「控制器」对应 CPU 中的控制单元。 「存储器」对应内存、磁盘、CPU 中的寄存器、L1/L2/L3 Cache 等存储设备。 「输入设备」对应键盘、鼠标等。 「输出设备」对应显示器等。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:5:0","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"32 位和 64 位 CPU 的最主要区别是什么？ 一次能计算多少字节的数据。 32 位 CPU 一次可以计算 4 个字节。 64 位 CPU 一次可以计算 8 个字节。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:6:0","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"为什么有了内存还需要寄存器？ 内存离 CPU 的物理距离太远了，而寄存器在 CPU 中，且紧挨着 CPU 的控制单元和逻辑运算单元，运算速度更快。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:7:0","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"常见的寄存器种类有哪些？ 「通用寄存器」，用来存放需要进行运算的数据。 「程序计数器」，用来存储 CPU 将要执行的下一条指令「所在的内存地址」。 「指令寄存器」，用来存放当前即将执行的指令，在指令执行完成之前，都存储在这里。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:7:1","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"总线是用来干什么的？ 总线用于 CPU 和内存以及其他设备之间的通信。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:8:0","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"总线分为哪几种？ 「地址总线」，用于指定 CPU 将要操作的内存地址。 「数据总线」，用于读写内存的数据。 「控制总线」，用于发送和接收信号，比如中断、设备复位等信号。CPU 收到信号后进行响应时，也需要控制总线。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:8:1","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"CPU 是如何通过总线读写内存数据的？ 首先要通过「地址总线」来指定内存的地址。 再通过「数据总线」来传输数据。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:8:2","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"CPU 执行程序的过程？（一个指令周期，CPU 做了什么？） CPU 读取「程序计数器」的值（即读取下一条指令的内存地址），然后 CPU 的「控制单元」操作「地址总线」指定需要访问的内存地址，接着通知内存设备准备数据，数据准备好后通过「数据总线」将指令传输给 CPU，CPU 收到数据后存入「指令寄存器」。 CPU 分析「指令寄存器」中的指令，确定指令的类型和参数：如果是计算类型的指令，就将指令交由「逻辑运算单元」运算；如果是存储类型的指令，则交由「控制单元」执行。 CPU 执行完指令后，「程序计数器」的值自增，执行下一条指令。自增的值的大小，由 CPU 的位宽决定，32 位 CPU 的指令需要 4 个字节存放，因此自增 4；而 64 位 CPU 则自增 8。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:9:0","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"64 位 CPU 相比 32 位 CPU 的优势在哪？64 位 CPU 的计算性能一定比 32 位 CPU 高吗？ 64 位 CPU 相比 32 位 CPU 的优势主要体现在两个方面： 64 位 CPU 可以一次计算 32 位~64 位的数字，而 32 位 CPU 如果要计算超过 32 位的数字，就需要分多步骤进行计算，效率就没那么高。但是大部分应用程序很少会使用超过 32 位的数字。只有运算大数字的时候，64 位 CPU 的优势才能体现出来，否则和 32 位 CPU 的计算性能相差不大。 64 位 CPU 可以寻址更大的内存空间。32 位 CPU 最大的寻址地址是 4G=$2^{32}$，而 64 位 CPU 的最大寻址地址是 4E=$2^{64}$。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:10:0","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"你知道软件的 32 位和 64 位之间的区别吗？32 位的软件可以运行在 64 位机器上吗？反过来呢？ 64 位和 32 位的软件，实际上代表指令是 64 位还是 32 位的。 如果想要 32 位指令在 64 位机器上执行，只需要一套兼容机制，就可以做到了。 但如果想要 64 位指令在 32 位机器上执行，就比较困难了，因为 32 位的寄存器存不下 64 位的指令。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:11:0","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"讲讲你对 L1、L2、L3 Cache 的理解？ L1 Cache 通常分为「数据缓存」和「指令缓存」，两者大小通常一致。 L1 Cache 和 L2 Cache 都是每个 CPU 核心独有的，而 L3 Cache 是多个 CPU 核心共享的。 CPU 访问 L1 Cache 需要 2-4 个时钟周期，访问 L2 Cache 需要 10-20 个时钟周期，访问 L3 Cache 需要 20-60 个时钟周期，访问寄存器一般少于一个时钟周期，访问内存需要 200-300 个时钟周期。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:12:0","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"什么时候同步 Cache 和内存？ 写直达（Write Through）：把数据同时写入内存和 Cache 中。 如果数据已经在 Cache 中，先更新 Cache，再更新内存。 如果数据没有在 Cache 中，直接更新内存。 问题：无论数据在不在 Cache 里面，每次写操作都会操作内存，影响性能。 写回（Write Back）：当发生写操作时，仅仅更新缓存，只有当缓存失效时，才更新内存。 如果数据在缓存中，则更新缓存并标记。 如果数据不在缓存中，并且对应缓存区域已被标记，则将缓存区域中的数据写回到内存中，再写入缓存。 如果我们大量操作都命中缓存，那么大部分时间里 CPU 都不需要读写内存，自然性能比写直达高很多。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:12:1","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"如何保证缓存一致性？ 写传播（Write Propagation）：某个 CPU 核心里的 Cache 数据更新时，必须要传播到其他核心的 Cache。 事务的串行化（Transaction Serialization）：某个 CPU 核心里对数据的操作顺序，必须在其他核心看起来顺序是一样的。 总线嗅探 当 CPU 核进行写操作时，通过总线把这个事件广播给其他所有核心，每个 CPU 核心都会监听总线上的广播事件，并检查是否有相同的数据在自己的 L1/L2 Cache 中，如果存在，则此时也更新 L1/L2 Cache。 问题：只保证了更新事件能被其他 CPU 核心知晓，并不能保证事务串行化。 MESI 协议 Modified（已修改）、Exclusive（独占）、Shared（共享）、Invalidated（已失效）。 使用上述的四个状态标记 Cache 中的数据。 Modifed：表示 Cache 中的数据已经修改，但还没有同步到内存中。 Exclusive：Cache 和内存是一致的，此时数据可以自由写入，而不用通知其他 CPU 核心。更新数据的同时标记为 Modified。 Shared：Cache 和内存是一致的，数据写入的时候，要先广播一个信号，要求其他核心中的对应 Cache 标记为 Invalidated，然后再更新当前 Cache 的数据，更新同时标记为 Modified。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:12:2","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"谈谈你对伪共享的理解？ 伪共享指的是多个 CPU 核心同时读写一个 Cache Line 的不同变量时，而导致的 CPU Cache 失效的现象。 避免伪共享的方法 在 Linux 内核中存在__cacheline_aligned_in_smp宏定义，采用这个宏定义可以使得变量在 Cache Line 中是对齐的。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:12:3","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"linux 中的 task 调度算法 在 linux 中，根据任务的优先级以及响应要求，将 task 主要分为两种，其中优先级的数值越小，优先级越高。 实时任务（优先级：0~99），对系统的响应时间要求很高，即要尽可能快地执行实时任务。 普通任务（优先级：100~139），响应时间没有很高的要求。 linux 为了保障高优先级的任务能够尽可能早地被执行，分为 3 种调度类： Deadline、Realtime 这两个调度类，应用于实时任务，调度策略如下： DEADLINE：安装 deadline 进行调度，距离当前时间点最近 deadline 的任务会被优先调度。 FIFO：对于相同优先级的任务，按照先来先服务原则，但是优先级更高的任务可以抢占低优先级的任务。 RR：对于相同优先级的任务，轮流运行一个时间片，但是优先级更高的任务可以抢占低优先级的任务。 Fair 调度类应用于普通任务，有两种调度策略： NORMAL：普通任务使用的调度策略。 BATCH：后台任务的调度策略，不会和终端交互，因此在不影响其他需要交互的任务的前提下，可以适当降低它的优先级。 CFS（完全公平调度）：为每个任务维护一个虚拟运行时间，优先选择虚拟运行时间少的任务。虚拟运行时间 = 时间运行时间 * NICE_0_LOAD / 权重。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:13:0","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"CPU 运行队列 每个 CPU 都有自己的运行队列，Deadline 运行队列 dl_rq，实时任务运行队列 rt_rq，CFS 运行队列 cfs_rq，其中 cfs_rq 的数据结构为红黑树，最左结点即为下次被调度的任务。 CPU 选择任务时，会按 Deadline \u003e Realtime \u003e Fair 的优先级顺序进行选择，因此实时任务总是会比普通任务优先被执行。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:13:1","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"什么是软中断？ linux 为了解决中断处理程序执行过长和中断丢失的问题，将中断过程分成了两个阶段，分别是「硬中断」和「软中断」。 「硬中断」用来快速处理中断，一般会暂时关闭中断请求，主要负责处理跟硬件紧密相关或者时间敏感的事情。「硬中断」会打断 CPU 正在执行的任务，然后立即执行中断处理程序。 「软中断」用来延迟处理「硬中断」未完成的工作，一般以「内核线程」的形式运行。每一个 CPU 核心都对应一个软中断内核线程，名字通常为ksoftirqd/「CPU编号」。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/:14:0","tags":null,"title":"操作系统面试题","uri":"https://fioepq9.cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"categories":null,"content":"二分查找是一种在有序序列中查找特定元素的搜索算法。优点是时间复杂度为 O(log n)，缺点是只能在有序序列中使用。 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/:0:0","tags":null,"title":"二分查找","uri":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"categories":null,"content":"在升序数组 nums 中查找 target 的索引 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/:1:0","tags":null,"title":"二分查找","uri":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"categories":null,"content":"搜索过程 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/:1:1","tags":null,"title":"二分查找","uri":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"categories":null,"content":"实现代码（go） func Search(nums []int, target int) int { lo, hi := 0, len(nums)-1 for lo \u003c= hi { mid := (lo + hi) \u003e\u003e 1 if target \u003c nums[mid] { hi = mid - 1 } else if target \u003e nums[mid] { lo = mid + 1 } else { return mid } } return -1 } ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/:1:2","tags":null,"title":"二分查找","uri":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"categories":null,"content":"在升序数组 nums 中查找 target 的最小索引 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/:2:0","tags":null,"title":"二分查找","uri":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"categories":null,"content":"搜索过程 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/:2:1","tags":null,"title":"二分查找","uri":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"categories":null,"content":"实现代码（go） func SearchLeft(nums []int, target int) int { lo, hi := 0, len(nums)-1 for lo \u003c= hi { if nums[lo] == target { return lo } mid := (lo + hi) \u003e\u003e 1 if target \u003c nums[mid] { hi = mid - 1 } else if target \u003e nums[mid] { lo = mid + 1 } else { hi = mid } } return -1 } ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/:2:2","tags":null,"title":"二分查找","uri":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"categories":null,"content":"在升序数组 nums 中查找 target 的最大索引 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/:3:0","tags":null,"title":"二分查找","uri":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"categories":null,"content":"搜索过程 ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/:3:1","tags":null,"title":"二分查找","uri":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"categories":null,"content":"实现代码（go） func SearchRight(nums []int, target int) int { lo, hi := 0, len(nums)-1 for lo \u003c= hi { if nums[hi] == target { return hi } mid := (lo+hi)\u003e\u003e1 + (lo+hi)\u00261 if target \u003c nums[mid] { hi = mid - 1 } else if target \u003e nums[mid] { lo = mid + 1 } else { lo = mid } } return -1 } ","date":"2022-10-10","objectID":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/:3:2","tags":null,"title":"二分查找","uri":"https://fioepq9.cn/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]